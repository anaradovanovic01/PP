INFO  15:10:21,750 - Compiling source file: D:\Faks\7. semestar\PP1\Projekat\Pocetni projekat\pp1lab.templateAST\workspace\MJCompiler\test\program.mj
INFO  15:10:21,783 - #2 program
INFO  15:10:21,783 - #46 p
INFO  15:10:21,783 - #9 const
INFO  15:10:21,784 - #46 int
INFO  15:10:21,785 - #46 size
INFO  15:10:21,785 - #35 =
INFO  15:10:21,785 - #45 10
INFO  15:10:21,785 - #18 ;
INFO  15:10:21,786 - #7 class
INFO  15:10:21,786 - #46 Table
INFO  15:10:21,786 - #24 {
INFO  15:10:21,787 - #46 int
INFO  15:10:21,787 - #46 pos
INFO  15:10:21,788 - #26 [
INFO  15:10:21,788 - #27 ]
INFO  15:10:21,788 - #20 ,
INFO  15:10:21,788 - #46 neg
INFO  15:10:21,788 - #26 [
INFO  15:10:21,788 - #27 ]
INFO  15:10:21,788 - #20 ,
INFO  15:10:21,789 - #46 factor
INFO  15:10:21,789 - #18 ;
INFO  15:10:21,789 - #24 {
INFO  15:10:21,790 - #46 Table
INFO  15:10:21,790 - #22 (
INFO  15:10:21,790 - #46 int
INFO  15:10:21,790 - #46 factor
INFO  15:10:21,791 - #23 )
INFO  15:10:21,791 - #24 {
INFO  15:10:21,791 - #46 factor
INFO  15:10:21,792 - #35 =
INFO  15:10:21,792 - #46 factor
INFO  15:10:21,792 - #18 ;
INFO  15:10:21,793 - #25 }
INFO  15:10:21,793 - #5 void
INFO  15:10:21,794 - #46 putp
INFO  15:10:21,794 - #22 (
INFO  15:10:21,794 - #46 int
INFO  15:10:21,794 - #46 a
INFO  15:10:21,794 - #20 ,
INFO  15:10:21,794 - #46 int
INFO  15:10:21,794 - #46 idx
INFO  15:10:21,794 - #23 )
INFO  15:10:21,795 - #24 {
INFO  15:10:21,795 - #46 pos
INFO  15:10:21,795 - #26 [
INFO  15:10:21,795 - #46 idx
INFO  15:10:21,795 - #27 ]
INFO  15:10:21,795 - #35 =
INFO  15:10:21,795 - #46 a
INFO  15:10:21,795 - #18 ;
INFO  15:10:21,795 - #25 }
INFO  15:10:21,795 - #5 void
INFO  15:10:21,796 - #46 putn
INFO  15:10:21,796 - #22 (
INFO  15:10:21,796 - #46 int
INFO  15:10:21,796 - #46 a
INFO  15:10:21,796 - #20 ,
INFO  15:10:21,796 - #46 int
INFO  15:10:21,796 - #46 idx
INFO  15:10:21,797 - #23 )
INFO  15:10:21,797 - #24 {
INFO  15:10:21,797 - #46 neg
INFO  15:10:21,797 - #26 [
INFO  15:10:21,797 - #46 idx
INFO  15:10:21,797 - #27 ]
INFO  15:10:21,797 - #35 =
INFO  15:10:21,797 - #46 a
INFO  15:10:21,797 - #18 ;
INFO  15:10:21,797 - #25 }
INFO  15:10:21,797 - #46 int
INFO  15:10:21,798 - #46 getp
INFO  15:10:21,798 - #22 (
INFO  15:10:21,798 - #46 int
INFO  15:10:21,798 - #46 idx
INFO  15:10:21,798 - #23 )
INFO  15:10:21,798 - #24 {
INFO  15:10:21,798 - #4 return
INFO  15:10:21,798 - #46 pos
INFO  15:10:21,798 - #26 [
INFO  15:10:21,798 - #46 idx
INFO  15:10:21,798 - #27 ]
INFO  15:10:21,798 - #18 ;
INFO  15:10:21,798 - #25 }
INFO  15:10:21,799 - #46 int
INFO  15:10:21,799 - #46 getn
INFO  15:10:21,799 - #22 (
INFO  15:10:21,799 - #46 int
INFO  15:10:21,799 - #46 idx
INFO  15:10:21,799 - #23 )
INFO  15:10:21,799 - #24 {
INFO  15:10:21,799 - #4 return
INFO  15:10:21,799 - #46 neg
INFO  15:10:21,799 - #26 [
INFO  15:10:21,799 - #46 idx
INFO  15:10:21,799 - #27 ]
INFO  15:10:21,800 - #18 ;
INFO  15:10:21,800 - #25 }
INFO  15:10:21,800 - #25 }
INFO  15:10:21,800 - #25 }
INFO  15:10:21,800 - #46 Table
INFO  15:10:21,800 - #46 val
INFO  15:10:21,800 - #18 ;
INFO  15:10:21,800 - #46 Int
INFO  15:10:21,800 - #46 rows
INFO  15:10:21,800 - #20 ,
INFO  15:10:21,800 - #46 columns
INFO  15:10:21,801 - #18 ;
INFO  15:10:21,801 - #24 {
INFO  15:10:21,801 - #5 void
INFO  15:10:21,801 - #46 f
INFO  15:10:21,801 - #22 (
INFO  15:10:21,801 - #46 char
INFO  15:10:21,801 - #46 ch
INFO  15:10:21,801 - #20 ,
INFO  15:10:21,801 - #46 int
INFO  15:10:21,801 - #46 a
INFO  15:10:21,801 - #20 ,
INFO  15:10:21,802 - #46 int
INFO  15:10:21,802 - #46 arg
INFO  15:10:21,802 - #23 )
INFO  15:10:21,802 - #46 int
INFO  15:10:21,802 - #46 x
INFO  15:10:21,802 - #18 ;
INFO  15:10:21,802 - #24 {
INFO  15:10:21,802 - #46 x
INFO  15:10:21,802 - #35 =
INFO  15:10:21,802 - #46 arg
INFO  15:10:21,803 - #18 ;
INFO  15:10:21,803 - #25 }
INFO  15:10:21,803 - #5 void
INFO  15:10:21,803 - #46 main
INFO  15:10:21,803 - #22 (
INFO  15:10:21,803 - #23 )
INFO  15:10:21,803 - #46 int
INFO  15:10:21,803 - #46 x
INFO  15:10:21,803 - #20 ,
INFO  15:10:21,803 - #46 i
INFO  15:10:21,803 - #18 ;
INFO  15:10:21,804 - #46 char
INFO  15:10:21,804 - #46 c
INFO  15:10:21,804 - #18 ;
INFO  15:10:21,804 - #46 int
INFO  15:10:21,804 - #46 arr
INFO  15:10:21,804 - #26 [
INFO  15:10:21,804 - #27 ]
INFO  15:10:21,804 - #18 ;
INFO  15:10:21,804 - #24 {
INFO  15:10:21,804 - #46 val
INFO  15:10:21,804 - #35 =
INFO  15:10:21,804 - #12 new
INFO  15:10:21,804 - #46 Table
INFO  15:10:21,804 - #22 (
INFO  15:10:21,804 - #45 2
INFO  15:10:21,805 - #23 )
INFO  15:10:21,805 - #18 ;
INFO  15:10:21,805 - #46 arr
INFO  15:10:21,805 - #35 =
INFO  15:10:21,805 - #12 new
INFO  15:10:21,805 - #46 int
INFO  15:10:21,805 - #26 [
INFO  15:10:21,805 - #45 3
INFO  15:10:21,805 - #27 ]
INFO  15:10:21,805 - #18 ;
INFO  15:10:21,807 - #46 i
INFO  15:10:21,807 - #35 =
INFO  15:10:21,807 - #45 0
INFO  15:10:21,807 - #18 ;
INFO  15:10:21,807 - #11 while
INFO  15:10:21,808 - #22 (
INFO  15:10:21,808 - #46 i
INFO  15:10:21,808 - #32 <
INFO  15:10:21,808 - #45 3
INFO  15:10:21,809 - #23 )
INFO  15:10:21,809 - #24 {
INFO  15:10:21,809 - #46 arr
INFO  15:10:21,809 - #26 [
INFO  15:10:21,809 - #46 i
INFO  15:10:21,809 - #27 ]
INFO  15:10:21,809 - #35 =
INFO  15:10:21,810 - #46 i
INFO  15:10:21,810 - #18 ;
INFO  15:10:21,810 - #46 i
INFO  15:10:21,810 - #38 ++
INFO  15:10:21,810 - #18 ;
INFO  15:10:21,810 - #25 }
INFO  15:10:21,810 - #46 arr
INFO  15:10:21,810 - #21 .
INFO  15:10:21,810 - #17 foreach
INFO  15:10:21,810 - #22 (
INFO  15:10:21,811 - #46 x
INFO  15:10:21,811 - #34 =>
INFO  15:10:21,811 - #3 print
INFO  15:10:21,811 - #22 (
INFO  15:10:21,811 - #46 x
INFO  15:10:21,811 - #23 )
INFO  15:10:21,811 - #18 ;
INFO  15:10:21,811 - #23 )
INFO  15:10:21,811 - #18 ;
INFO  15:10:21,811 - #46 val
INFO  15:10:21,811 - #21 .
INFO  15:10:21,812 - #46 pos
INFO  15:10:21,812 - #35 =
INFO  15:10:21,812 - #12 new
INFO  15:10:21,812 - #46 int
INFO  15:10:21,812 - #26 [
INFO  15:10:21,812 - #46 size
INFO  15:10:21,812 - #27 ]
INFO  15:10:21,812 - #18 ;
INFO  15:10:21,812 - #46 val
INFO  15:10:21,812 - #21 .
INFO  15:10:21,812 - #46 neg
INFO  15:10:21,812 - #35 =
INFO  15:10:21,812 - #12 new
INFO  15:10:21,813 - #46 int
INFO  15:10:21,813 - #26 [
INFO  15:10:21,813 - #46 size
INFO  15:10:21,813 - #27 ]
INFO  15:10:21,813 - #18 ;
INFO  15:10:21,813 - #13 read
INFO  15:10:21,813 - #22 (
INFO  15:10:21,813 - #46 x
INFO  15:10:21,813 - #23 )
INFO  15:10:21,813 - #18 ;
INFO  15:10:21,813 - #26 [
INFO  15:10:21,813 - #46 i
INFO  15:10:21,813 - #20 ,
INFO  15:10:21,813 - #46 x
INFO  15:10:21,813 - #27 ]
INFO  15:10:21,814 - #35 =
INFO  15:10:21,814 - #46 arr
INFO  15:10:21,814 - #18 ;
INFO  15:10:21,814 - #11 while
INFO  15:10:21,814 - #22 (
INFO  15:10:21,814 - #46 i
INFO  15:10:21,814 - #32 <
INFO  15:10:21,814 - #46 size
INFO  15:10:21,814 - #23 )
INFO  15:10:21,814 - #24 {
INFO  15:10:21,814 - #46 val
INFO  15:10:21,814 - #21 .
INFO  15:10:21,814 - #46 putp
INFO  15:10:21,814 - #22 (
INFO  15:10:21,814 - #45 0
INFO  15:10:21,814 - #20 ,
INFO  15:10:21,814 - #46 i
INFO  15:10:21,814 - #23 )
INFO  15:10:21,815 - #18 ;
INFO  15:10:21,815 - #46 val
INFO  15:10:21,815 - #21 .
INFO  15:10:21,815 - #46 putn
INFO  15:10:21,815 - #22 (
INFO  15:10:21,815 - #45 0
INFO  15:10:21,815 - #20 ,
INFO  15:10:21,815 - #46 i
INFO  15:10:21,815 - #23 )
INFO  15:10:21,815 - #18 ;
INFO  15:10:21,815 - #46 i
INFO  15:10:21,815 - #38 ++
INFO  15:10:21,815 - #18 ;
INFO  15:10:21,815 - #25 }
INFO  15:10:21,815 - #46 f
INFO  15:10:21,815 - #22 (
INFO  15:10:21,815 - #46 c
INFO  15:10:21,815 - #20 ,
INFO  15:10:21,815 - #46 x
INFO  15:10:21,815 - #20 ,
INFO  15:10:21,816 - #46 i
INFO  15:10:21,816 - #23 )
INFO  15:10:21,816 - #18 ;
INFO  15:10:21,816 - #13 read
INFO  15:10:21,816 - #22 (
INFO  15:10:21,816 - #46 rows
INFO  15:10:21,816 - #23 )
INFO  15:10:21,816 - #18 ;
INFO  15:10:21,816 - #46 x
INFO  15:10:21,816 - #35 =
INFO  15:10:21,816 - #46 rows
INFO  15:10:21,816 - #18 ;
INFO  15:10:21,816 - #11 while
INFO  15:10:21,816 - #22 (
INFO  15:10:21,816 - #50 true
INFO  15:10:21,816 - #23 )
