INFO  12:02:20,777 - Compiling source file: D:\Faks\7. semestar\PP1\Projekat\Pocetni projekat\pp1lab.templateAST\workspace\MJCompiler\test\program.mj
INFO  12:02:20,816 - #2 program
INFO  12:02:20,817 - #46 p
INFO  12:02:20,817 - #9 const
INFO  12:02:20,818 - #46 int
INFO  12:02:20,818 - #46 size
INFO  12:02:20,818 - #35 =
INFO  12:02:20,818 - #45 10
INFO  12:02:20,819 - #18 ;
INFO  12:02:20,819 - #7 class
INFO  12:02:20,819 - #46 Table
INFO  12:02:20,819 - #24 {
INFO  12:02:20,819 - #46 int
INFO  12:02:20,819 - #46 pos
INFO  12:02:20,819 - #26 [
INFO  12:02:20,820 - #27 ]
INFO  12:02:20,820 - #20 ,
INFO  12:02:20,820 - #46 neg
INFO  12:02:20,820 - #26 [
INFO  12:02:20,820 - #27 ]
INFO  12:02:20,820 - #20 ,
INFO  12:02:20,820 - #46 factor
INFO  12:02:20,821 - #18 ;
INFO  12:02:20,821 - #24 {
INFO  12:02:20,821 - #46 Table
INFO  12:02:20,822 - #22 (
INFO  12:02:20,822 - #46 int
INFO  12:02:20,822 - #46 factor
INFO  12:02:20,823 - #23 )
INFO  12:02:20,823 - #24 {
INFO  12:02:20,823 - #46 factor
INFO  12:02:20,823 - #35 =
INFO  12:02:20,823 - #46 factor
INFO  12:02:20,824 - #18 ;
INFO  12:02:20,824 - #25 }
INFO  12:02:20,824 - #5 void
INFO  12:02:20,824 - #46 putp
INFO  12:02:20,824 - #22 (
INFO  12:02:20,824 - #46 int
INFO  12:02:20,824 - #46 a
INFO  12:02:20,825 - #20 ,
INFO  12:02:20,825 - #46 int
INFO  12:02:20,825 - #46 idx
INFO  12:02:20,825 - #23 )
INFO  12:02:20,825 - #24 {
INFO  12:02:20,825 - #46 pos
INFO  12:02:20,826 - #26 [
INFO  12:02:20,826 - #46 idx
INFO  12:02:20,826 - #27 ]
INFO  12:02:20,826 - #35 =
INFO  12:02:20,826 - #46 a
INFO  12:02:20,826 - #18 ;
INFO  12:02:20,826 - #25 }
INFO  12:02:20,826 - #5 void
INFO  12:02:20,827 - #46 putn
INFO  12:02:20,827 - #22 (
INFO  12:02:20,827 - #46 int
INFO  12:02:20,827 - #46 a
INFO  12:02:20,827 - #20 ,
INFO  12:02:20,827 - #46 int
INFO  12:02:20,827 - #46 idx
INFO  12:02:20,828 - #23 )
INFO  12:02:20,828 - #24 {
INFO  12:02:20,828 - #46 neg
INFO  12:02:20,828 - #26 [
INFO  12:02:20,828 - #46 idx
INFO  12:02:20,828 - #27 ]
INFO  12:02:20,828 - #35 =
INFO  12:02:20,828 - #46 a
INFO  12:02:20,828 - #18 ;
INFO  12:02:20,828 - #25 }
INFO  12:02:20,829 - #46 int
INFO  12:02:20,829 - #46 getp
INFO  12:02:20,829 - #22 (
INFO  12:02:20,829 - #46 int
INFO  12:02:20,829 - #46 idx
INFO  12:02:20,829 - #23 )
INFO  12:02:20,829 - #24 {
INFO  12:02:20,829 - #4 return
INFO  12:02:20,830 - #46 pos
INFO  12:02:20,830 - #26 [
INFO  12:02:20,830 - #46 idx
INFO  12:02:20,830 - #27 ]
INFO  12:02:20,830 - #18 ;
INFO  12:02:20,830 - #25 }
INFO  12:02:20,830 - #46 int
INFO  12:02:20,831 - #46 getn
INFO  12:02:20,831 - #22 (
INFO  12:02:20,831 - #46 int
INFO  12:02:20,831 - #46 idx
INFO  12:02:20,831 - #23 )
INFO  12:02:20,831 - #24 {
INFO  12:02:20,831 - #4 return
INFO  12:02:20,831 - #46 neg
INFO  12:02:20,832 - #26 [
INFO  12:02:20,832 - #46 idx
INFO  12:02:20,832 - #27 ]
INFO  12:02:20,832 - #18 ;
INFO  12:02:20,832 - #25 }
INFO  12:02:20,832 - #25 }
INFO  12:02:20,832 - #25 }
INFO  12:02:20,832 - #46 Table
INFO  12:02:20,833 - #46 val
INFO  12:02:20,833 - #18 ;
INFO  12:02:20,833 - #46 Int
INFO  12:02:20,833 - #46 rows
INFO  12:02:20,833 - #20 ,
INFO  12:02:20,833 - #46 columns
INFO  12:02:20,833 - #18 ;
INFO  12:02:20,833 - #24 {
INFO  12:02:20,833 - #5 void
INFO  12:02:20,833 - #46 f
INFO  12:02:20,833 - #22 (
INFO  12:02:20,833 - #46 char
INFO  12:02:20,834 - #46 ch
INFO  12:02:20,834 - #20 ,
INFO  12:02:20,834 - #46 int
INFO  12:02:20,834 - #46 a
INFO  12:02:20,834 - #20 ,
INFO  12:02:20,834 - #46 int
INFO  12:02:20,834 - #46 arg
INFO  12:02:20,834 - #23 )
INFO  12:02:20,834 - #46 int
INFO  12:02:20,834 - #46 x
INFO  12:02:20,834 - #18 ;
INFO  12:02:20,834 - #24 {
INFO  12:02:20,834 - #46 x
INFO  12:02:20,835 - #35 =
INFO  12:02:20,835 - #46 arg
INFO  12:02:20,835 - #18 ;
INFO  12:02:20,835 - #25 }
INFO  12:02:20,835 - #5 void
INFO  12:02:20,835 - #46 main
INFO  12:02:20,835 - #22 (
INFO  12:02:20,835 - #23 )
INFO  12:02:20,836 - #46 int
INFO  12:02:20,836 - #46 x
INFO  12:02:20,837 - #20 ,
INFO  12:02:20,837 - #46 i
INFO  12:02:20,837 - #18 ;
INFO  12:02:20,837 - #46 char
INFO  12:02:20,837 - #46 c
INFO  12:02:20,837 - #18 ;
INFO  12:02:20,837 - #46 int
INFO  12:02:20,837 - #46 arr
INFO  12:02:20,837 - #26 [
INFO  12:02:20,837 - #27 ]
INFO  12:02:20,837 - #18 ;
INFO  12:02:20,837 - #24 {
INFO  12:02:20,837 - #46 val
INFO  12:02:20,837 - #35 =
INFO  12:02:20,837 - #12 new
INFO  12:02:20,838 - #46 Table
INFO  12:02:20,838 - #22 (
INFO  12:02:20,838 - #45 2
INFO  12:02:20,838 - #23 )
INFO  12:02:20,838 - #18 ;
INFO  12:02:20,838 - #46 arr
INFO  12:02:20,838 - #35 =
INFO  12:02:20,838 - #12 new
INFO  12:02:20,838 - #46 int
INFO  12:02:20,838 - #26 [
INFO  12:02:20,838 - #45 3
INFO  12:02:20,838 - #27 ]
INFO  12:02:20,838 - #18 ;
INFO  12:02:20,840 - #46 i
INFO  12:02:20,840 - #35 =
INFO  12:02:20,840 - #45 0
INFO  12:02:20,841 - #18 ;
INFO  12:02:20,841 - #11 while
INFO  12:02:20,841 - #22 (
INFO  12:02:20,841 - #46 i
INFO  12:02:20,841 - #32 <
INFO  12:02:20,841 - #45 3
INFO  12:02:20,842 - #23 )
INFO  12:02:20,843 - #24 {
INFO  12:02:20,843 - #46 arr
INFO  12:02:20,843 - #26 [
INFO  12:02:20,843 - #46 i
INFO  12:02:20,843 - #27 ]
INFO  12:02:20,843 - #35 =
INFO  12:02:20,843 - #46 i
INFO  12:02:20,843 - #18 ;
INFO  12:02:20,843 - #46 i
INFO  12:02:20,843 - #38 ++
INFO  12:02:20,843 - #18 ;
INFO  12:02:20,844 - #25 }
INFO  12:02:20,844 - #46 arr
INFO  12:02:20,844 - #21 .
INFO  12:02:20,844 - #17 foreach
INFO  12:02:20,844 - #22 (
INFO  12:02:20,844 - #46 x
INFO  12:02:20,845 - #34 =>
INFO  12:02:20,845 - #3 print
INFO  12:02:20,845 - #22 (
INFO  12:02:20,845 - #46 x
INFO  12:02:20,845 - #23 )
INFO  12:02:20,845 - #18 ;
INFO  12:02:20,845 - #23 )
INFO  12:02:20,845 - #18 ;
INFO  12:02:20,845 - #46 val
INFO  12:02:20,845 - #21 .
INFO  12:02:20,845 - #46 pos
INFO  12:02:20,845 - #35 =
INFO  12:02:20,845 - #12 new
INFO  12:02:20,845 - #46 int
INFO  12:02:20,845 - #26 [
INFO  12:02:20,845 - #46 size
INFO  12:02:20,845 - #27 ]
INFO  12:02:20,845 - #18 ;
INFO  12:02:20,845 - #46 val
INFO  12:02:20,845 - #21 .
INFO  12:02:20,846 - #46 neg
INFO  12:02:20,846 - #35 =
INFO  12:02:20,846 - #12 new
INFO  12:02:20,846 - #46 int
INFO  12:02:20,846 - #26 [
INFO  12:02:20,846 - #46 size
INFO  12:02:20,846 - #27 ]
INFO  12:02:20,846 - #18 ;
INFO  12:02:20,846 - #13 read
INFO  12:02:20,846 - #22 (
INFO  12:02:20,846 - #46 x
INFO  12:02:20,846 - #23 )
INFO  12:02:20,846 - #18 ;
INFO  12:02:20,846 - #26 [
INFO  12:02:20,846 - #46 i
INFO  12:02:20,846 - #20 ,
INFO  12:02:20,846 - #46 x
INFO  12:02:20,846 - #27 ]
INFO  12:02:20,846 - #35 =
INFO  12:02:20,846 - #46 arr
INFO  12:02:20,846 - #18 ;
INFO  12:02:20,847 - #11 while
INFO  12:02:20,847 - #22 (
INFO  12:02:20,847 - #46 i
INFO  12:02:20,847 - #32 <
INFO  12:02:20,847 - #46 size
INFO  12:02:20,847 - #23 )
INFO  12:02:20,847 - #24 {
INFO  12:02:20,847 - #46 val
INFO  12:02:20,847 - #21 .
INFO  12:02:20,847 - #46 putp
INFO  12:02:20,847 - #22 (
INFO  12:02:20,847 - #45 0
INFO  12:02:20,847 - #20 ,
INFO  12:02:20,847 - #46 i
INFO  12:02:20,847 - #23 )
INFO  12:02:20,847 - #18 ;
INFO  12:02:20,847 - #46 val
INFO  12:02:20,847 - #21 .
INFO  12:02:20,847 - #46 putn
INFO  12:02:20,847 - #22 (
INFO  12:02:20,848 - #45 0
INFO  12:02:20,848 - #20 ,
INFO  12:02:20,848 - #46 i
INFO  12:02:20,848 - #23 )
INFO  12:02:20,848 - #18 ;
INFO  12:02:20,848 - #46 i
INFO  12:02:20,848 - #38 ++
INFO  12:02:20,848 - #18 ;
INFO  12:02:20,848 - #25 }
INFO  12:02:20,848 - #46 f
INFO  12:02:20,848 - #22 (
INFO  12:02:20,848 - #46 c
INFO  12:02:20,848 - #20 ,
INFO  12:02:20,848 - #46 x
INFO  12:02:20,848 - #20 ,
INFO  12:02:20,848 - #46 i
INFO  12:02:20,848 - #23 )
INFO  12:02:20,848 - #18 ;
INFO  12:02:20,849 - #13 read
INFO  12:02:20,849 - #22 (
INFO  12:02:20,849 - #46 rows
INFO  12:02:20,849 - #23 )
INFO  12:02:20,849 - #18 ;
INFO  12:02:20,849 - #46 x
INFO  12:02:20,849 - #35 =
INFO  12:02:20,849 - #46 rows
INFO  12:02:20,849 - #18 ;
INFO  12:02:20,849 - #11 while
INFO  12:02:20,849 - #22 (
INFO  12:02:20,849 - #50 true
ERROR 12:02:20,849 - 
Sintaksna greska na liniji 43
ERROR 12:02:20,849 - Fatalna greska, parsiranje se ne moze nastaviti na liniji 43
