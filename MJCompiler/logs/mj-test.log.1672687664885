INFO  20:26:29,444 - Compiling source file: D:\Faks\7. semestar\PP1\Projekat\Pocetni projekat\pp1lab.templateAST\workspace\MJCompiler\test\program.mj
INFO  20:26:29,477 - #2 program
INFO  20:26:29,477 - #46 p
INFO  20:26:29,477 - #9 const
INFO  20:26:29,477 - #46 int
INFO  20:26:29,477 - #46 size
INFO  20:26:29,477 - #35 =
INFO  20:26:29,477 - #45 10
INFO  20:26:29,478 - #18 ;
INFO  20:26:29,479 - #7 class
INFO  20:26:29,479 - #46 Table
INFO  20:26:29,479 - #24 {
INFO  20:26:29,479 - #46 int
INFO  20:26:29,480 - #46 pos
INFO  20:26:29,480 - #26 [
INFO  20:26:29,480 - #27 ]
INFO  20:26:29,480 - #20 ,
INFO  20:26:29,480 - #46 neg
INFO  20:26:29,480 - #26 [
INFO  20:26:29,480 - #27 ]
INFO  20:26:29,480 - #20 ,
INFO  20:26:29,480 - #46 factor
INFO  20:26:29,480 - #18 ;
INFO  20:26:29,480 - #24 {
INFO  20:26:29,482 - #46 Table
INFO  20:26:29,482 - #22 (
INFO  20:26:29,482 - #46 int
INFO  20:26:29,482 - #46 factor
INFO  20:26:29,482 - #23 )
INFO  20:26:29,482 - #24 {
INFO  20:26:29,482 - #46 factor
INFO  20:26:29,482 - #35 =
INFO  20:26:29,483 - #46 factor
INFO  20:26:29,483 - #18 ;
INFO  20:26:29,483 - #25 }
INFO  20:26:29,484 - #5 void
INFO  20:26:29,484 - #46 putp
INFO  20:26:29,485 - #22 (
INFO  20:26:29,485 - #46 int
INFO  20:26:29,485 - #46 a
INFO  20:26:29,485 - #20 ,
INFO  20:26:29,485 - #46 int
INFO  20:26:29,485 - #46 idx
INFO  20:26:29,485 - #23 )
INFO  20:26:29,485 - #24 {
INFO  20:26:29,485 - #46 pos
INFO  20:26:29,485 - #26 [
INFO  20:26:29,486 - #46 idx
INFO  20:26:29,486 - #27 ]
INFO  20:26:29,486 - #35 =
INFO  20:26:29,486 - #46 a
INFO  20:26:29,486 - #18 ;
INFO  20:26:29,486 - #25 }
INFO  20:26:29,486 - #5 void
INFO  20:26:29,487 - #46 putn
INFO  20:26:29,487 - #22 (
INFO  20:26:29,487 - #46 int
INFO  20:26:29,487 - #46 a
INFO  20:26:29,487 - #20 ,
INFO  20:26:29,487 - #46 int
INFO  20:26:29,487 - #46 idx
INFO  20:26:29,487 - #23 )
INFO  20:26:29,487 - #24 {
INFO  20:26:29,487 - #46 neg
INFO  20:26:29,487 - #26 [
INFO  20:26:29,488 - #46 idx
INFO  20:26:29,488 - #27 ]
INFO  20:26:29,488 - #35 =
INFO  20:26:29,488 - #46 a
INFO  20:26:29,488 - #18 ;
INFO  20:26:29,488 - #25 }
INFO  20:26:29,488 - #46 int
INFO  20:26:29,488 - #46 getp
INFO  20:26:29,488 - #22 (
INFO  20:26:29,488 - #46 int
INFO  20:26:29,488 - #46 idx
INFO  20:26:29,488 - #23 )
INFO  20:26:29,488 - #24 {
INFO  20:26:29,489 - #4 return
INFO  20:26:29,489 - #46 pos
INFO  20:26:29,489 - #26 [
INFO  20:26:29,489 - #46 idx
INFO  20:26:29,489 - #27 ]
INFO  20:26:29,489 - #18 ;
INFO  20:26:29,489 - #25 }
INFO  20:26:29,489 - #46 int
INFO  20:26:29,489 - #46 getn
INFO  20:26:29,489 - #22 (
INFO  20:26:29,489 - #46 int
INFO  20:26:29,489 - #46 idx
INFO  20:26:29,489 - #23 )
INFO  20:26:29,490 - #24 {
INFO  20:26:29,490 - #4 return
INFO  20:26:29,490 - #46 neg
INFO  20:26:29,490 - #26 [
INFO  20:26:29,490 - #46 idx
INFO  20:26:29,490 - #27 ]
INFO  20:26:29,490 - #18 ;
INFO  20:26:29,490 - #25 }
INFO  20:26:29,490 - #25 }
INFO  20:26:29,490 - #25 }
INFO  20:26:29,490 - #46 Table
INFO  20:26:29,491 - #46 val
INFO  20:26:29,491 - #18 ;
INFO  20:26:29,491 - #46 Int
INFO  20:26:29,491 - #46 rows
INFO  20:26:29,491 - #20 ,
INFO  20:26:29,491 - #46 columns
INFO  20:26:29,491 - #18 ;
INFO  20:26:29,491 - #24 {
INFO  20:26:29,491 - #5 void
INFO  20:26:29,491 - #46 f
INFO  20:26:29,491 - #22 (
INFO  20:26:29,492 - #46 char
INFO  20:26:29,492 - #46 ch
INFO  20:26:29,492 - #20 ,
INFO  20:26:29,492 - #46 int
INFO  20:26:29,492 - #46 a
INFO  20:26:29,492 - #20 ,
INFO  20:26:29,492 - #46 int
INFO  20:26:29,492 - #46 arg
INFO  20:26:29,492 - #23 )
INFO  20:26:29,492 - #46 int
INFO  20:26:29,492 - #46 x
INFO  20:26:29,492 - #18 ;
INFO  20:26:29,492 - #24 {
INFO  20:26:29,492 - #46 x
INFO  20:26:29,493 - #35 =
INFO  20:26:29,493 - #46 arg
INFO  20:26:29,493 - #18 ;
INFO  20:26:29,493 - #25 }
INFO  20:26:29,493 - #5 void
INFO  20:26:29,493 - #46 main
INFO  20:26:29,493 - #22 (
INFO  20:26:29,493 - #23 )
INFO  20:26:29,494 - #46 int
INFO  20:26:29,494 - #46 x
INFO  20:26:29,494 - #20 ,
INFO  20:26:29,494 - #46 i
INFO  20:26:29,494 - #18 ;
INFO  20:26:29,494 - #46 char
INFO  20:26:29,494 - #46 c
INFO  20:26:29,494 - #18 ;
INFO  20:26:29,494 - #46 int
INFO  20:26:29,494 - #46 arr
INFO  20:26:29,494 - #26 [
INFO  20:26:29,494 - #27 ]
INFO  20:26:29,494 - #18 ;
INFO  20:26:29,494 - #24 {
INFO  20:26:29,494 - #46 val
INFO  20:26:29,495 - #35 =
INFO  20:26:29,495 - #12 new
INFO  20:26:29,495 - #46 Table
INFO  20:26:29,495 - #22 (
INFO  20:26:29,495 - #45 2
INFO  20:26:29,495 - #23 )
INFO  20:26:29,495 - #18 ;
INFO  20:26:29,495 - #46 arr
INFO  20:26:29,495 - #35 =
INFO  20:26:29,495 - #12 new
INFO  20:26:29,495 - #46 int
INFO  20:26:29,495 - #26 [
INFO  20:26:29,496 - #45 3
INFO  20:26:29,496 - #27 ]
INFO  20:26:29,496 - #18 ;
INFO  20:26:29,497 - #46 i
INFO  20:26:29,497 - #35 =
INFO  20:26:29,498 - #45 0
INFO  20:26:29,498 - #18 ;
INFO  20:26:29,498 - #11 while
INFO  20:26:29,498 - #22 (
INFO  20:26:29,498 - #46 i
INFO  20:26:29,498 - #32 <
INFO  20:26:29,498 - #45 3
INFO  20:26:29,499 - #23 )
INFO  20:26:29,499 - #24 {
INFO  20:26:29,499 - #46 arr
INFO  20:26:29,499 - #26 [
INFO  20:26:29,499 - #46 i
INFO  20:26:29,499 - #27 ]
INFO  20:26:29,499 - #35 =
INFO  20:26:29,499 - #46 i
INFO  20:26:29,499 - #18 ;
INFO  20:26:29,499 - #46 i
INFO  20:26:29,499 - #38 ++
INFO  20:26:29,499 - #18 ;
INFO  20:26:29,500 - #25 }
INFO  20:26:29,500 - #46 arr
INFO  20:26:29,500 - #21 .
INFO  20:26:29,500 - #17 foreach
INFO  20:26:29,500 - #22 (
INFO  20:26:29,500 - #46 x
INFO  20:26:29,500 - #34 =>
INFO  20:26:29,500 - #3 print
INFO  20:26:29,500 - #22 (
INFO  20:26:29,500 - #46 x
INFO  20:26:29,500 - #23 )
INFO  20:26:29,500 - #18 ;
INFO  20:26:29,500 - #23 )
INFO  20:26:29,500 - #18 ;
INFO  20:26:29,500 - #46 val
INFO  20:26:29,500 - #21 .
INFO  20:26:29,500 - #46 pos
INFO  20:26:29,501 - #35 =
INFO  20:26:29,501 - #12 new
INFO  20:26:29,501 - #46 int
INFO  20:26:29,501 - #26 [
INFO  20:26:29,501 - #46 size
INFO  20:26:29,501 - #27 ]
INFO  20:26:29,501 - #18 ;
INFO  20:26:29,501 - #46 val
INFO  20:26:29,501 - #21 .
INFO  20:26:29,501 - #46 neg
INFO  20:26:29,501 - #35 =
INFO  20:26:29,501 - #12 new
INFO  20:26:29,501 - #46 int
INFO  20:26:29,501 - #26 [
INFO  20:26:29,501 - #46 size
INFO  20:26:29,501 - #27 ]
INFO  20:26:29,501 - #18 ;
INFO  20:26:29,501 - #13 read
INFO  20:26:29,501 - #22 (
INFO  20:26:29,501 - #46 x
INFO  20:26:29,501 - #23 )
INFO  20:26:29,501 - #18 ;
INFO  20:26:29,501 - #26 [
INFO  20:26:29,502 - #46 i
INFO  20:26:29,502 - #20 ,
INFO  20:26:29,502 - #46 x
INFO  20:26:29,502 - #27 ]
INFO  20:26:29,502 - #35 =
INFO  20:26:29,502 - #46 arr
INFO  20:26:29,502 - #18 ;
INFO  20:26:29,502 - #11 while
INFO  20:26:29,502 - #22 (
INFO  20:26:29,502 - #46 i
INFO  20:26:29,502 - #32 <
INFO  20:26:29,502 - #46 size
INFO  20:26:29,502 - #23 )
INFO  20:26:29,502 - #24 {
INFO  20:26:29,502 - #46 val
INFO  20:26:29,502 - #21 .
INFO  20:26:29,502 - #46 putp
INFO  20:26:29,503 - #22 (
INFO  20:26:29,503 - #45 0
INFO  20:26:29,503 - #20 ,
INFO  20:26:29,503 - #46 i
INFO  20:26:29,503 - #23 )
INFO  20:26:29,503 - #18 ;
INFO  20:26:29,503 - #46 val
INFO  20:26:29,503 - #21 .
INFO  20:26:29,503 - #46 putn
INFO  20:26:29,503 - #22 (
INFO  20:26:29,503 - #45 0
INFO  20:26:29,503 - #20 ,
INFO  20:26:29,503 - #46 i
INFO  20:26:29,504 - #23 )
INFO  20:26:29,504 - #18 ;
INFO  20:26:29,504 - #46 i
INFO  20:26:29,504 - #38 ++
INFO  20:26:29,504 - #18 ;
INFO  20:26:29,504 - #25 }
INFO  20:26:29,504 - #46 f
INFO  20:26:29,504 - #22 (
INFO  20:26:29,504 - #46 c
INFO  20:26:29,504 - #20 ,
INFO  20:26:29,504 - #46 x
INFO  20:26:29,504 - #20 ,
INFO  20:26:29,504 - #46 i
INFO  20:26:29,505 - #23 )
INFO  20:26:29,505 - #18 ;
INFO  20:26:29,505 - #13 read
INFO  20:26:29,505 - #22 (
INFO  20:26:29,505 - #46 rows
INFO  20:26:29,505 - #23 )
INFO  20:26:29,505 - #18 ;
INFO  20:26:29,505 - #46 x
INFO  20:26:29,505 - #35 =
INFO  20:26:29,505 - #46 rows
INFO  20:26:29,505 - #18 ;
INFO  20:26:29,505 - #11 while
INFO  20:26:29,505 - #22 (
INFO  20:26:29,505 - #47 true
INFO  20:26:29,505 - #23 )
