INFO  20:37:03,616 - Compiling source file: D:\Faks\7. semestar\PP1\Projekat\Pocetni projekat\pp1lab.templateAST\workspace\MJCompiler\test\program.mj
INFO  20:37:03,678 - #2 program
INFO  20:37:03,678 - #48 p
INFO  20:37:03,678 - #9 const
INFO  20:37:03,679 - #48 int
INFO  20:37:03,679 - #48 size
INFO  20:37:03,681 - #35 =
INFO  20:37:03,681 - #45 10
INFO  20:37:03,681 - #18 ;
INFO  20:37:03,681 - #7 class
INFO  20:37:03,681 - #48 Table
INFO  20:37:03,681 - #24 {
INFO  20:37:03,682 - #48 int
INFO  20:37:03,683 - #48 pos
INFO  20:37:03,683 - #26 [
INFO  20:37:03,683 - #27 ]
INFO  20:37:03,683 - #20 ,
INFO  20:37:03,683 - #48 neg
INFO  20:37:03,683 - #26 [
INFO  20:37:03,683 - #27 ]
INFO  20:37:03,684 - #20 ,
INFO  20:37:03,684 - #48 factor
INFO  20:37:03,684 - #18 ;
INFO  20:37:03,684 - #24 {
INFO  20:37:03,685 - #48 Table
INFO  20:37:03,686 - #22 (
INFO  20:37:03,686 - #48 int
INFO  20:37:03,686 - #48 factor
INFO  20:37:03,686 - #23 )
INFO  20:37:03,686 - #24 {
INFO  20:37:03,686 - #48 factor
INFO  20:37:03,687 - #35 =
INFO  20:37:03,687 - #48 factor
INFO  20:37:03,688 - #18 ;
INFO  20:37:03,688 - #25 }
INFO  20:37:03,688 - #5 void
INFO  20:37:03,689 - #48 putp
INFO  20:37:03,689 - #22 (
INFO  20:37:03,689 - #48 int
INFO  20:37:03,689 - #48 a
INFO  20:37:03,689 - #20 ,
INFO  20:37:03,689 - #48 int
INFO  20:37:03,689 - #48 idx
INFO  20:37:03,689 - #23 )
INFO  20:37:03,689 - #24 {
INFO  20:37:03,690 - #48 pos
INFO  20:37:03,690 - #26 [
INFO  20:37:03,690 - #48 idx
INFO  20:37:03,690 - #27 ]
INFO  20:37:03,690 - #35 =
INFO  20:37:03,690 - #48 a
INFO  20:37:03,690 - #18 ;
INFO  20:37:03,690 - #25 }
INFO  20:37:03,690 - #5 void
INFO  20:37:03,691 - #48 putn
INFO  20:37:03,691 - #22 (
INFO  20:37:03,691 - #48 int
INFO  20:37:03,692 - #48 a
INFO  20:37:03,692 - #20 ,
INFO  20:37:03,692 - #48 int
INFO  20:37:03,692 - #48 idx
INFO  20:37:03,692 - #23 )
INFO  20:37:03,692 - #24 {
INFO  20:37:03,692 - #48 neg
INFO  20:37:03,692 - #26 [
INFO  20:37:03,692 - #48 idx
INFO  20:37:03,692 - #27 ]
INFO  20:37:03,692 - #35 =
INFO  20:37:03,692 - #48 a
INFO  20:37:03,692 - #18 ;
INFO  20:37:03,692 - #25 }
INFO  20:37:03,692 - #48 int
INFO  20:37:03,693 - #48 getp
INFO  20:37:03,693 - #22 (
INFO  20:37:03,693 - #48 int
INFO  20:37:03,693 - #48 idx
INFO  20:37:03,693 - #23 )
INFO  20:37:03,693 - #24 {
INFO  20:37:03,693 - #4 return
INFO  20:37:03,693 - #48 pos
INFO  20:37:03,693 - #26 [
INFO  20:37:03,693 - #48 idx
INFO  20:37:03,693 - #27 ]
INFO  20:37:03,693 - #18 ;
INFO  20:37:03,693 - #25 }
INFO  20:37:03,693 - #48 int
INFO  20:37:03,693 - #48 getn
INFO  20:37:03,694 - #22 (
INFO  20:37:03,694 - #48 int
INFO  20:37:03,694 - #48 idx
INFO  20:37:03,694 - #23 )
INFO  20:37:03,694 - #24 {
INFO  20:37:03,694 - #4 return
INFO  20:37:03,694 - #48 neg
INFO  20:37:03,694 - #26 [
INFO  20:37:03,694 - #48 idx
INFO  20:37:03,694 - #27 ]
INFO  20:37:03,694 - #18 ;
INFO  20:37:03,694 - #25 }
INFO  20:37:03,694 - #25 }
INFO  20:37:03,694 - #25 }
INFO  20:37:03,694 - #48 Table
INFO  20:37:03,695 - #48 val
INFO  20:37:03,695 - #18 ;
INFO  20:37:03,695 - #48 Int
INFO  20:37:03,695 - #48 rows
INFO  20:37:03,695 - #20 ,
INFO  20:37:03,695 - #48 columns
INFO  20:37:03,695 - #18 ;
INFO  20:37:03,695 - #24 {
INFO  20:37:03,695 - #5 void
INFO  20:37:03,695 - #48 f
INFO  20:37:03,695 - #22 (
INFO  20:37:03,695 - #48 char
INFO  20:37:03,695 - #48 ch
INFO  20:37:03,695 - #20 ,
INFO  20:37:03,695 - #48 int
INFO  20:37:03,695 - #48 a
INFO  20:37:03,696 - #20 ,
INFO  20:37:03,696 - #48 int
INFO  20:37:03,696 - #48 arg
INFO  20:37:03,696 - #23 )
INFO  20:37:03,696 - #48 int
INFO  20:37:03,696 - #48 x
INFO  20:37:03,696 - #18 ;
INFO  20:37:03,696 - #24 {
INFO  20:37:03,696 - #48 x
INFO  20:37:03,696 - #35 =
INFO  20:37:03,696 - #48 arg
INFO  20:37:03,696 - #18 ;
INFO  20:37:03,696 - #25 }
INFO  20:37:03,697 - #5 void
INFO  20:37:03,697 - #48 main
INFO  20:37:03,697 - #22 (
INFO  20:37:03,697 - #23 )
INFO  20:37:03,697 - #48 int
INFO  20:37:03,697 - #48 x
INFO  20:37:03,698 - #20 ,
INFO  20:37:03,698 - #48 i
INFO  20:37:03,698 - #18 ;
INFO  20:37:03,698 - #48 char
INFO  20:37:03,698 - #48 c
INFO  20:37:03,698 - #18 ;
INFO  20:37:03,698 - #48 int
INFO  20:37:03,698 - #48 arr
INFO  20:37:03,699 - #26 [
INFO  20:37:03,699 - #27 ]
INFO  20:37:03,699 - #18 ;
INFO  20:37:03,699 - #24 {
INFO  20:37:03,699 - #48 val
INFO  20:37:03,699 - #35 =
INFO  20:37:03,699 - #12 new
INFO  20:37:03,699 - #48 Table
INFO  20:37:03,699 - #22 (
INFO  20:37:03,699 - #45 2
INFO  20:37:03,699 - #23 )
INFO  20:37:03,699 - #18 ;
INFO  20:37:03,699 - #48 arr
INFO  20:37:03,699 - #35 =
INFO  20:37:03,699 - #12 new
INFO  20:37:03,700 - #48 int
INFO  20:37:03,700 - #26 [
INFO  20:37:03,700 - #45 3
INFO  20:37:03,700 - #27 ]
INFO  20:37:03,700 - #18 ;
INFO  20:37:03,701 - #48 i
INFO  20:37:03,701 - #35 =
INFO  20:37:03,702 - #45 0
INFO  20:37:03,702 - #18 ;
INFO  20:37:03,702 - #11 while
INFO  20:37:03,702 - #22 (
INFO  20:37:03,702 - #48 i
INFO  20:37:03,702 - #32 <
INFO  20:37:03,702 - #45 3
INFO  20:37:03,703 - #23 )
INFO  20:37:03,704 - #24 {
INFO  20:37:03,704 - #48 arr
INFO  20:37:03,704 - #26 [
INFO  20:37:03,704 - #48 i
INFO  20:37:03,704 - #27 ]
INFO  20:37:03,704 - #35 =
INFO  20:37:03,704 - #48 i
INFO  20:37:03,704 - #18 ;
INFO  20:37:03,704 - #48 i
INFO  20:37:03,704 - #38 ++
INFO  20:37:03,704 - #18 ;
INFO  20:37:03,704 - #25 }
INFO  20:37:03,705 - #48 arr
INFO  20:37:03,705 - #21 .
INFO  20:37:03,705 - #17 foreach
INFO  20:37:03,705 - #22 (
INFO  20:37:03,705 - #48 x
INFO  20:37:03,705 - #34 =>
INFO  20:37:03,705 - #3 print
INFO  20:37:03,705 - #22 (
INFO  20:37:03,706 - #48 x
INFO  20:37:03,706 - #23 )
INFO  20:37:03,706 - #18 ;
INFO  20:37:03,706 - #23 )
INFO  20:37:03,706 - #18 ;
INFO  20:37:03,706 - #48 val
INFO  20:37:03,706 - #21 .
INFO  20:37:03,707 - #48 pos
INFO  20:37:03,707 - #35 =
INFO  20:37:03,707 - #12 new
INFO  20:37:03,707 - #48 int
INFO  20:37:03,707 - #26 [
INFO  20:37:03,707 - #48 size
INFO  20:37:03,707 - #27 ]
INFO  20:37:03,707 - #18 ;
INFO  20:37:03,707 - #48 val
INFO  20:37:03,707 - #21 .
INFO  20:37:03,707 - #48 neg
INFO  20:37:03,708 - #35 =
INFO  20:37:03,708 - #12 new
INFO  20:37:03,708 - #48 int
INFO  20:37:03,708 - #26 [
INFO  20:37:03,708 - #48 size
INFO  20:37:03,708 - #27 ]
INFO  20:37:03,708 - #18 ;
INFO  20:37:03,708 - #13 read
INFO  20:37:03,708 - #22 (
INFO  20:37:03,708 - #48 x
INFO  20:37:03,708 - #23 )
INFO  20:37:03,709 - #18 ;
INFO  20:37:03,709 - #26 [
INFO  20:37:03,709 - #48 i
INFO  20:37:03,709 - #20 ,
INFO  20:37:03,709 - #48 x
INFO  20:37:03,709 - #27 ]
INFO  20:37:03,709 - #35 =
INFO  20:37:03,709 - #48 arr
INFO  20:37:03,709 - #18 ;
INFO  20:37:03,710 - #11 while
INFO  20:37:03,710 - #22 (
INFO  20:37:03,710 - #48 i
INFO  20:37:03,710 - #32 <
INFO  20:37:03,710 - #48 size
INFO  20:37:03,710 - #23 )
INFO  20:37:03,710 - #24 {
INFO  20:37:03,710 - #48 val
INFO  20:37:03,710 - #21 .
INFO  20:37:03,711 - #48 putp
INFO  20:37:03,711 - #22 (
INFO  20:37:03,711 - #45 0
INFO  20:37:03,711 - #20 ,
INFO  20:37:03,711 - #48 i
INFO  20:37:03,711 - #23 )
INFO  20:37:03,711 - #18 ;
INFO  20:37:03,711 - #48 val
INFO  20:37:03,711 - #21 .
INFO  20:37:03,711 - #48 putn
INFO  20:37:03,711 - #22 (
INFO  20:37:03,711 - #45 0
INFO  20:37:03,711 - #20 ,
INFO  20:37:03,711 - #48 i
INFO  20:37:03,712 - #23 )
INFO  20:37:03,712 - #18 ;
INFO  20:37:03,712 - #48 i
INFO  20:37:03,712 - #38 ++
INFO  20:37:03,712 - #18 ;
INFO  20:37:03,712 - #25 }
INFO  20:37:03,712 - #48 f
INFO  20:37:03,712 - #22 (
INFO  20:37:03,713 - #48 c
INFO  20:37:03,713 - #20 ,
INFO  20:37:03,713 - #48 x
INFO  20:37:03,713 - #20 ,
INFO  20:37:03,713 - #48 i
INFO  20:37:03,713 - #23 )
INFO  20:37:03,713 - #18 ;
INFO  20:37:03,713 - #13 read
INFO  20:37:03,713 - #22 (
INFO  20:37:03,713 - #48 rows
INFO  20:37:03,713 - #23 )
INFO  20:37:03,713 - #18 ;
INFO  20:37:03,713 - #48 x
INFO  20:37:03,713 - #35 =
INFO  20:37:03,713 - #48 rows
INFO  20:37:03,713 - #18 ;
INFO  20:37:03,714 - #11 while
INFO  20:37:03,714 - #22 (
INFO  20:37:03,714 - #46 true
INFO  20:37:03,714 - #23 )
