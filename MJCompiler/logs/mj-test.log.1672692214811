INFO  21:33:10,278 - Compiling source file: D:\Faks\7. semestar\PP1\Projekat\Pocetni projekat\pp1lab.templateAST\workspace\MJCompiler\test\program.mj
INFO  21:33:10,323 - #2 program
INFO  21:33:10,324 - #48 p
INFO  21:33:10,324 - #9 const
INFO  21:33:10,325 - #48 int
INFO  21:33:10,326 - #48 size
INFO  21:33:10,326 - #35 =
INFO  21:33:10,327 - #45 10
INFO  21:33:10,327 - #18 ;
INFO  21:33:10,327 - #7 class
INFO  21:33:10,328 - #48 Table
INFO  21:33:10,329 - #24 {
INFO  21:33:10,329 - #48 int
INFO  21:33:10,330 - #48 pos
INFO  21:33:10,330 - #26 [
INFO  21:33:10,330 - #27 ]
INFO  21:33:10,331 - #20 ,
INFO  21:33:10,331 - #48 neg
INFO  21:33:10,331 - #26 [
INFO  21:33:10,331 - #27 ]
INFO  21:33:10,331 - #20 ,
INFO  21:33:10,332 - #48 factor
INFO  21:33:10,332 - #18 ;
INFO  21:33:10,333 - #24 {
INFO  21:33:10,334 - #48 Table
INFO  21:33:10,335 - #22 (
INFO  21:33:10,335 - #48 int
INFO  21:33:10,335 - #48 factor
INFO  21:33:10,335 - #23 )
INFO  21:33:10,335 - #24 {
INFO  21:33:10,336 - #48 factor
INFO  21:33:10,336 - #35 =
INFO  21:33:10,337 - #48 factor
INFO  21:33:10,337 - #18 ;
INFO  21:33:10,338 - #25 }
INFO  21:33:10,338 - #5 void
INFO  21:33:10,340 - #48 putp
INFO  21:33:10,340 - #22 (
INFO  21:33:10,340 - #48 int
INFO  21:33:10,340 - #48 a
INFO  21:33:10,340 - #20 ,
INFO  21:33:10,340 - #48 int
INFO  21:33:10,341 - #48 idx
INFO  21:33:10,341 - #23 )
INFO  21:33:10,341 - #24 {
INFO  21:33:10,341 - #48 pos
INFO  21:33:10,341 - #26 [
INFO  21:33:10,341 - #48 idx
INFO  21:33:10,342 - #27 ]
INFO  21:33:10,342 - #35 =
INFO  21:33:10,342 - #48 a
INFO  21:33:10,342 - #18 ;
INFO  21:33:10,342 - #25 }
INFO  21:33:10,342 - #5 void
INFO  21:33:10,344 - #48 putn
INFO  21:33:10,344 - #22 (
INFO  21:33:10,344 - #48 int
INFO  21:33:10,344 - #48 a
INFO  21:33:10,344 - #20 ,
INFO  21:33:10,344 - #48 int
INFO  21:33:10,344 - #48 idx
INFO  21:33:10,345 - #23 )
INFO  21:33:10,345 - #24 {
INFO  21:33:10,345 - #48 neg
INFO  21:33:10,345 - #26 [
INFO  21:33:10,345 - #48 idx
INFO  21:33:10,345 - #27 ]
INFO  21:33:10,345 - #35 =
INFO  21:33:10,346 - #48 a
INFO  21:33:10,346 - #18 ;
INFO  21:33:10,346 - #25 }
INFO  21:33:10,346 - #48 int
INFO  21:33:10,346 - #48 getp
INFO  21:33:10,346 - #22 (
INFO  21:33:10,346 - #48 int
INFO  21:33:10,347 - #48 idx
INFO  21:33:10,347 - #23 )
INFO  21:33:10,347 - #24 {
INFO  21:33:10,347 - #4 return
INFO  21:33:10,347 - #48 pos
INFO  21:33:10,347 - #26 [
INFO  21:33:10,347 - #48 idx
INFO  21:33:10,348 - #27 ]
INFO  21:33:10,348 - #18 ;
INFO  21:33:10,348 - #25 }
INFO  21:33:10,348 - #48 int
INFO  21:33:10,348 - #48 getn
INFO  21:33:10,348 - #22 (
INFO  21:33:10,348 - #48 int
INFO  21:33:10,348 - #48 idx
INFO  21:33:10,349 - #23 )
INFO  21:33:10,349 - #24 {
INFO  21:33:10,349 - #4 return
INFO  21:33:10,349 - #48 neg
INFO  21:33:10,349 - #26 [
INFO  21:33:10,349 - #48 idx
INFO  21:33:10,349 - #27 ]
INFO  21:33:10,349 - #18 ;
INFO  21:33:10,350 - #25 }
INFO  21:33:10,350 - #25 }
INFO  21:33:10,350 - #25 }
INFO  21:33:10,350 - #48 Table
INFO  21:33:10,351 - #48 val
INFO  21:33:10,351 - #18 ;
INFO  21:33:10,351 - #48 Int
INFO  21:33:10,352 - #48 rows
INFO  21:33:10,352 - #20 ,
INFO  21:33:10,352 - #48 columns
INFO  21:33:10,352 - #18 ;
INFO  21:33:10,352 - #24 {
INFO  21:33:10,352 - #5 void
INFO  21:33:10,352 - #48 f
INFO  21:33:10,352 - #22 (
INFO  21:33:10,353 - #48 char
INFO  21:33:10,353 - #48 ch
INFO  21:33:10,353 - #20 ,
INFO  21:33:10,353 - #48 int
INFO  21:33:10,353 - #48 a
INFO  21:33:10,353 - #20 ,
INFO  21:33:10,353 - #48 int
INFO  21:33:10,353 - #48 arg
INFO  21:33:10,353 - #23 )
INFO  21:33:10,354 - #48 int
INFO  21:33:10,354 - #48 x
INFO  21:33:10,354 - #18 ;
INFO  21:33:10,354 - #24 {
INFO  21:33:10,354 - #48 x
INFO  21:33:10,354 - #35 =
INFO  21:33:10,354 - #48 arg
INFO  21:33:10,354 - #18 ;
INFO  21:33:10,355 - #25 }
INFO  21:33:10,355 - #5 void
INFO  21:33:10,355 - #48 main
INFO  21:33:10,355 - #22 (
INFO  21:33:10,355 - #23 )
INFO  21:33:10,356 - #48 int
INFO  21:33:10,356 - #48 x
INFO  21:33:10,356 - #20 ,
INFO  21:33:10,356 - #48 i
INFO  21:33:10,356 - #18 ;
INFO  21:33:10,356 - #48 char
INFO  21:33:10,356 - #48 c
INFO  21:33:10,356 - #18 ;
INFO  21:33:10,356 - #48 int
INFO  21:33:10,356 - #48 arr
INFO  21:33:10,356 - #26 [
INFO  21:33:10,356 - #27 ]
INFO  21:33:10,357 - #18 ;
INFO  21:33:10,357 - #24 {
INFO  21:33:10,357 - #48 val
INFO  21:33:10,357 - #35 =
INFO  21:33:10,357 - #12 new
INFO  21:33:10,357 - #48 Table
INFO  21:33:10,357 - #22 (
INFO  21:33:10,357 - #45 2
INFO  21:33:10,357 - #23 )
INFO  21:33:10,357 - #18 ;
INFO  21:33:10,358 - #48 arr
INFO  21:33:10,358 - #35 =
INFO  21:33:10,358 - #12 new
INFO  21:33:10,358 - #48 int
INFO  21:33:10,358 - #26 [
INFO  21:33:10,358 - #45 3
INFO  21:33:10,358 - #27 ]
INFO  21:33:10,358 - #18 ;
INFO  21:33:10,358 - #48 i
INFO  21:33:10,358 - #35 =
INFO  21:33:10,358 - #45 0
INFO  21:33:10,359 - #18 ;
INFO  21:33:10,359 - #11 while
INFO  21:33:10,359 - #22 (
INFO  21:33:10,359 - #48 i
INFO  21:33:10,359 - #32 <
INFO  21:33:10,359 - #45 3
INFO  21:33:10,360 - #23 )
INFO  21:33:10,360 - #24 {
INFO  21:33:10,360 - #48 arr
INFO  21:33:10,360 - #26 [
INFO  21:33:10,360 - #48 i
INFO  21:33:10,360 - #27 ]
INFO  21:33:10,360 - #35 =
INFO  21:33:10,360 - #48 i
INFO  21:33:10,360 - #18 ;
INFO  21:33:10,360 - #48 i
INFO  21:33:10,360 - #38 ++
INFO  21:33:10,360 - #18 ;
INFO  21:33:10,361 - #25 }
INFO  21:33:10,361 - #48 arr
INFO  21:33:10,361 - #21 .
INFO  21:33:10,361 - #17 foreach
INFO  21:33:10,361 - #22 (
INFO  21:33:10,361 - #48 x
INFO  21:33:10,361 - #34 =>
INFO  21:33:10,361 - #3 print
INFO  21:33:10,361 - #22 (
INFO  21:33:10,361 - #48 x
INFO  21:33:10,361 - #23 )
INFO  21:33:10,361 - #18 ;
INFO  21:33:10,361 - #23 )
INFO  21:33:10,362 - #18 ;
INFO  21:33:10,362 - #48 val
INFO  21:33:10,362 - #21 .
INFO  21:33:10,362 - #48 pos
INFO  21:33:10,362 - #35 =
INFO  21:33:10,362 - #12 new
INFO  21:33:10,362 - #48 int
INFO  21:33:10,362 - #26 [
INFO  21:33:10,362 - #48 size
INFO  21:33:10,362 - #27 ]
INFO  21:33:10,362 - #18 ;
INFO  21:33:10,362 - #48 val
INFO  21:33:10,362 - #21 .
INFO  21:33:10,362 - #48 neg
INFO  21:33:10,363 - #35 =
INFO  21:33:10,363 - #12 new
INFO  21:33:10,363 - #48 int
INFO  21:33:10,363 - #26 [
INFO  21:33:10,363 - #48 size
INFO  21:33:10,363 - #27 ]
INFO  21:33:10,363 - #18 ;
INFO  21:33:10,363 - #13 read
INFO  21:33:10,363 - #22 (
INFO  21:33:10,363 - #48 x
INFO  21:33:10,363 - #23 )
INFO  21:33:10,363 - #18 ;
INFO  21:33:10,363 - #26 [
INFO  21:33:10,363 - #48 i
INFO  21:33:10,363 - #20 ,
INFO  21:33:10,364 - #48 x
INFO  21:33:10,366 - #27 ]
INFO  21:33:10,366 - #35 =
INFO  21:33:10,366 - #48 arr
INFO  21:33:10,366 - #18 ;
INFO  21:33:10,366 - #11 while
INFO  21:33:10,366 - #22 (
INFO  21:33:10,366 - #48 i
INFO  21:33:10,366 - #32 <
INFO  21:33:10,366 - #48 size
INFO  21:33:10,366 - #23 )
INFO  21:33:10,366 - #24 {
INFO  21:33:10,366 - #48 val
INFO  21:33:10,366 - #21 .
INFO  21:33:10,366 - #48 putp
INFO  21:33:10,366 - #22 (
INFO  21:33:10,366 - #45 0
INFO  21:33:10,366 - #20 ,
INFO  21:33:10,366 - #48 i
INFO  21:33:10,366 - #23 )
INFO  21:33:10,366 - #18 ;
INFO  21:33:10,367 - #48 val
INFO  21:33:10,367 - #21 .
INFO  21:33:10,367 - #48 putn
INFO  21:33:10,367 - #22 (
INFO  21:33:10,367 - #45 0
INFO  21:33:10,367 - #20 ,
INFO  21:33:10,367 - #48 i
INFO  21:33:10,367 - #23 )
INFO  21:33:10,367 - #18 ;
INFO  21:33:10,367 - #48 i
INFO  21:33:10,367 - #38 ++
INFO  21:33:10,367 - #18 ;
INFO  21:33:10,367 - #25 }
INFO  21:33:10,367 - #48 f
INFO  21:33:10,367 - #22 (
INFO  21:33:10,367 - #48 c
INFO  21:33:10,368 - #20 ,
INFO  21:33:10,368 - #48 x
INFO  21:33:10,368 - #20 ,
INFO  21:33:10,368 - #48 i
INFO  21:33:10,368 - #23 )
INFO  21:33:10,368 - #18 ;
INFO  21:33:10,368 - #13 read
INFO  21:33:10,368 - #22 (
INFO  21:33:10,368 - #48 rows
INFO  21:33:10,368 - #23 )
INFO  21:33:10,368 - #18 ;
INFO  21:33:10,368 - #48 x
INFO  21:33:10,368 - #35 =
INFO  21:33:10,368 - #48 rows
INFO  21:33:10,368 - #18 ;
INFO  21:33:10,368 - #11 while
INFO  21:33:10,368 - #22 (
INFO  21:33:10,368 - #46 true
INFO  21:33:10,368 - #23 )
