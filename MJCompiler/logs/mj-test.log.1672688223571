INFO  20:35:47,728 - Compiling source file: D:\Faks\7. semestar\PP1\Projekat\Pocetni projekat\pp1lab.templateAST\workspace\MJCompiler\test\program.mj
INFO  20:35:47,848 - #2 program
INFO  20:35:47,848 - #48 p
INFO  20:35:47,848 - #9 const
INFO  20:35:47,849 - #48 int
INFO  20:35:47,850 - #48 size
INFO  20:35:47,851 - #35 =
INFO  20:35:47,851 - #45 10
INFO  20:35:47,851 - #18 ;
INFO  20:35:47,851 - #7 class
INFO  20:35:47,852 - #48 Table
INFO  20:35:47,853 - #24 {
INFO  20:35:47,853 - #48 int
INFO  20:35:47,854 - #48 pos
INFO  20:35:47,854 - #26 [
INFO  20:35:47,854 - #27 ]
INFO  20:35:47,854 - #20 ,
INFO  20:35:47,855 - #48 neg
INFO  20:35:47,855 - #26 [
INFO  20:35:47,855 - #27 ]
INFO  20:35:47,855 - #20 ,
INFO  20:35:47,855 - #48 factor
INFO  20:35:47,855 - #18 ;
INFO  20:35:47,856 - #24 {
INFO  20:35:47,857 - #48 Table
INFO  20:35:47,858 - #22 (
INFO  20:35:47,858 - #48 int
INFO  20:35:47,858 - #48 factor
INFO  20:35:47,858 - #23 )
INFO  20:35:47,859 - #24 {
INFO  20:35:47,859 - #48 factor
INFO  20:35:47,859 - #35 =
INFO  20:35:47,860 - #48 factor
INFO  20:35:47,861 - #18 ;
INFO  20:35:47,862 - #25 }
INFO  20:35:47,862 - #5 void
INFO  20:35:47,863 - #48 putp
INFO  20:35:47,863 - #22 (
INFO  20:35:47,864 - #48 int
INFO  20:35:47,864 - #48 a
INFO  20:35:47,864 - #20 ,
INFO  20:35:47,865 - #48 int
INFO  20:35:47,865 - #48 idx
INFO  20:35:47,865 - #23 )
INFO  20:35:47,865 - #24 {
INFO  20:35:47,865 - #48 pos
INFO  20:35:47,865 - #26 [
INFO  20:35:47,865 - #48 idx
INFO  20:35:47,865 - #27 ]
INFO  20:35:47,865 - #35 =
INFO  20:35:47,865 - #48 a
INFO  20:35:47,865 - #18 ;
INFO  20:35:47,865 - #25 }
INFO  20:35:47,865 - #5 void
INFO  20:35:47,867 - #48 putn
INFO  20:35:47,867 - #22 (
INFO  20:35:47,867 - #48 int
INFO  20:35:47,867 - #48 a
INFO  20:35:47,867 - #20 ,
INFO  20:35:47,868 - #48 int
INFO  20:35:47,868 - #48 idx
INFO  20:35:47,868 - #23 )
INFO  20:35:47,868 - #24 {
INFO  20:35:47,868 - #48 neg
INFO  20:35:47,868 - #26 [
INFO  20:35:47,868 - #48 idx
INFO  20:35:47,868 - #27 ]
INFO  20:35:47,868 - #35 =
INFO  20:35:47,868 - #48 a
INFO  20:35:47,868 - #18 ;
INFO  20:35:47,868 - #25 }
INFO  20:35:47,868 - #48 int
INFO  20:35:47,868 - #48 getp
INFO  20:35:47,869 - #22 (
INFO  20:35:47,869 - #48 int
INFO  20:35:47,869 - #48 idx
INFO  20:35:47,869 - #23 )
INFO  20:35:47,869 - #24 {
INFO  20:35:47,869 - #4 return
INFO  20:35:47,869 - #48 pos
INFO  20:35:47,869 - #26 [
INFO  20:35:47,869 - #48 idx
INFO  20:35:47,870 - #27 ]
INFO  20:35:47,870 - #18 ;
INFO  20:35:47,870 - #25 }
INFO  20:35:47,870 - #48 int
INFO  20:35:47,870 - #48 getn
INFO  20:35:47,870 - #22 (
INFO  20:35:47,870 - #48 int
INFO  20:35:47,870 - #48 idx
INFO  20:35:47,870 - #23 )
INFO  20:35:47,871 - #24 {
INFO  20:35:47,871 - #4 return
INFO  20:35:47,871 - #48 neg
INFO  20:35:47,871 - #26 [
INFO  20:35:47,871 - #48 idx
INFO  20:35:47,871 - #27 ]
INFO  20:35:47,871 - #18 ;
INFO  20:35:47,871 - #25 }
INFO  20:35:47,871 - #25 }
INFO  20:35:47,871 - #25 }
INFO  20:35:47,872 - #48 Table
INFO  20:35:47,872 - #48 val
INFO  20:35:47,872 - #18 ;
INFO  20:35:47,873 - #48 Int
INFO  20:35:47,873 - #48 rows
INFO  20:35:47,873 - #20 ,
INFO  20:35:47,873 - #48 columns
INFO  20:35:47,873 - #18 ;
INFO  20:35:47,873 - #24 {
INFO  20:35:47,873 - #5 void
INFO  20:35:47,873 - #48 f
INFO  20:35:47,873 - #22 (
INFO  20:35:47,873 - #48 char
INFO  20:35:47,873 - #48 ch
INFO  20:35:47,874 - #20 ,
INFO  20:35:47,874 - #48 int
INFO  20:35:47,874 - #48 a
INFO  20:35:47,874 - #20 ,
INFO  20:35:47,874 - #48 int
INFO  20:35:47,874 - #48 arg
INFO  20:35:47,874 - #23 )
INFO  20:35:47,874 - #48 int
INFO  20:35:47,874 - #48 x
INFO  20:35:47,874 - #18 ;
INFO  20:35:47,874 - #24 {
INFO  20:35:47,874 - #48 x
INFO  20:35:47,875 - #35 =
INFO  20:35:47,875 - #48 arg
INFO  20:35:47,875 - #18 ;
INFO  20:35:47,875 - #25 }
INFO  20:35:47,875 - #5 void
INFO  20:35:47,875 - #48 main
INFO  20:35:47,875 - #22 (
INFO  20:35:47,875 - #23 )
INFO  20:35:47,877 - #48 int
INFO  20:35:47,877 - #48 x
INFO  20:35:47,877 - #20 ,
INFO  20:35:47,877 - #48 i
INFO  20:35:47,877 - #18 ;
INFO  20:35:47,877 - #48 char
INFO  20:35:47,877 - #48 c
INFO  20:35:47,878 - #18 ;
INFO  20:35:47,878 - #48 int
INFO  20:35:47,878 - #48 arr
INFO  20:35:47,878 - #26 [
INFO  20:35:47,878 - #27 ]
INFO  20:35:47,878 - #18 ;
INFO  20:35:47,878 - #24 {
INFO  20:35:47,878 - #48 val
INFO  20:35:47,878 - #35 =
INFO  20:35:47,878 - #12 new
INFO  20:35:47,879 - #48 Table
INFO  20:35:47,879 - #22 (
INFO  20:35:47,879 - #45 2
INFO  20:35:47,879 - #23 )
INFO  20:35:47,879 - #18 ;
INFO  20:35:47,880 - #48 arr
INFO  20:35:47,880 - #35 =
INFO  20:35:47,880 - #12 new
INFO  20:35:47,880 - #48 int
INFO  20:35:47,880 - #26 [
INFO  20:35:47,880 - #45 3
INFO  20:35:47,880 - #27 ]
INFO  20:35:47,882 - #18 ;
INFO  20:35:47,882 - #48 i
INFO  20:35:47,882 - #35 =
INFO  20:35:47,883 - #45 0
INFO  20:35:47,883 - #18 ;
INFO  20:35:47,883 - #11 while
INFO  20:35:47,883 - #22 (
INFO  20:35:47,883 - #48 i
INFO  20:35:47,883 - #32 <
INFO  20:35:47,883 - #45 3
INFO  20:35:47,885 - #23 )
INFO  20:35:47,886 - #24 {
INFO  20:35:47,886 - #48 arr
INFO  20:35:47,886 - #26 [
INFO  20:35:47,886 - #48 i
INFO  20:35:47,886 - #27 ]
INFO  20:35:47,886 - #35 =
INFO  20:35:47,886 - #48 i
INFO  20:35:47,886 - #18 ;
INFO  20:35:47,886 - #48 i
INFO  20:35:47,887 - #38 ++
INFO  20:35:47,887 - #18 ;
INFO  20:35:47,887 - #25 }
INFO  20:35:47,887 - #48 arr
INFO  20:35:47,887 - #21 .
INFO  20:35:47,887 - #17 foreach
INFO  20:35:47,887 - #22 (
INFO  20:35:47,887 - #48 x
INFO  20:35:47,888 - #34 =>
INFO  20:35:47,888 - #3 print
INFO  20:35:47,888 - #22 (
INFO  20:35:47,888 - #48 x
INFO  20:35:47,888 - #23 )
INFO  20:35:47,888 - #18 ;
INFO  20:35:47,888 - #23 )
INFO  20:35:47,888 - #18 ;
INFO  20:35:47,888 - #48 val
INFO  20:35:47,889 - #21 .
INFO  20:35:47,889 - #48 pos
INFO  20:35:47,889 - #35 =
INFO  20:35:47,889 - #12 new
INFO  20:35:47,889 - #48 int
INFO  20:35:47,889 - #26 [
INFO  20:35:47,889 - #48 size
INFO  20:35:47,890 - #27 ]
INFO  20:35:47,890 - #18 ;
INFO  20:35:47,890 - #48 val
INFO  20:35:47,890 - #21 .
INFO  20:35:47,890 - #48 neg
INFO  20:35:47,890 - #35 =
INFO  20:35:47,890 - #12 new
INFO  20:35:47,890 - #48 int
INFO  20:35:47,890 - #26 [
INFO  20:35:47,890 - #48 size
INFO  20:35:47,890 - #27 ]
INFO  20:35:47,891 - #18 ;
INFO  20:35:47,891 - #13 read
INFO  20:35:47,891 - #22 (
INFO  20:35:47,891 - #48 x
INFO  20:35:47,891 - #23 )
INFO  20:35:47,891 - #18 ;
INFO  20:35:47,891 - #26 [
INFO  20:35:47,891 - #48 i
INFO  20:35:47,891 - #20 ,
INFO  20:35:47,891 - #48 x
INFO  20:35:47,892 - #27 ]
INFO  20:35:47,892 - #35 =
INFO  20:35:47,892 - #48 arr
INFO  20:35:47,892 - #18 ;
INFO  20:35:47,892 - #11 while
INFO  20:35:47,892 - #22 (
INFO  20:35:47,892 - #48 i
INFO  20:35:47,892 - #32 <
INFO  20:35:47,892 - #48 size
INFO  20:35:47,892 - #23 )
INFO  20:35:47,892 - #24 {
INFO  20:35:47,892 - #48 val
INFO  20:35:47,892 - #21 .
INFO  20:35:47,893 - #48 putp
INFO  20:35:47,893 - #22 (
INFO  20:35:47,893 - #45 0
INFO  20:35:47,893 - #20 ,
INFO  20:35:47,893 - #48 i
INFO  20:35:47,893 - #23 )
INFO  20:35:47,893 - #18 ;
INFO  20:35:47,893 - #48 val
INFO  20:35:47,893 - #21 .
INFO  20:35:47,893 - #48 putn
INFO  20:35:47,893 - #22 (
INFO  20:35:47,893 - #45 0
INFO  20:35:47,893 - #20 ,
INFO  20:35:47,894 - #48 i
INFO  20:35:47,894 - #23 )
INFO  20:35:47,894 - #18 ;
INFO  20:35:47,894 - #48 i
INFO  20:35:47,894 - #38 ++
INFO  20:35:47,894 - #18 ;
INFO  20:35:47,894 - #25 }
INFO  20:35:47,894 - #48 f
INFO  20:35:47,894 - #22 (
INFO  20:35:47,894 - #48 c
INFO  20:35:47,894 - #20 ,
INFO  20:35:47,894 - #48 x
INFO  20:35:47,894 - #20 ,
INFO  20:35:47,894 - #48 i
INFO  20:35:47,895 - #23 )
INFO  20:35:47,895 - #18 ;
INFO  20:35:47,895 - #13 read
INFO  20:35:47,895 - #22 (
INFO  20:35:47,895 - #48 rows
INFO  20:35:47,895 - #23 )
INFO  20:35:47,895 - #18 ;
INFO  20:35:47,895 - #48 x
INFO  20:35:47,895 - #35 =
INFO  20:35:47,895 - #48 rows
INFO  20:35:47,895 - #18 ;
INFO  20:35:47,895 - #11 while
INFO  20:35:47,895 - #22 (
INFO  20:35:47,895 - #46 true
INFO  20:35:47,895 - #23 )
