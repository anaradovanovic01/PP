INFO  12:01:39,355 - Compiling source file: D:\Faks\7. semestar\PP1\Projekat\Pocetni projekat\pp1lab.templateAST\workspace\MJCompiler\test\program.mj
INFO  12:01:39,388 - #2 program
INFO  12:01:39,388 - #46 p
INFO  12:01:39,388 - #9 const
INFO  12:01:39,389 - #46 int
INFO  12:01:39,389 - #46 size
INFO  12:01:39,390 - #35 =
INFO  12:01:39,390 - #45 10
INFO  12:01:39,390 - #18 ;
INFO  12:01:39,390 - #7 class
INFO  12:01:39,390 - #46 Table
INFO  12:01:39,390 - #24 {
INFO  12:01:39,391 - #46 int
INFO  12:01:39,391 - #46 pos
INFO  12:01:39,391 - #26 [
INFO  12:01:39,391 - #27 ]
INFO  12:01:39,391 - #20 ,
INFO  12:01:39,391 - #46 neg
INFO  12:01:39,391 - #26 [
INFO  12:01:39,391 - #27 ]
INFO  12:01:39,391 - #20 ,
INFO  12:01:39,392 - #46 factor
INFO  12:01:39,392 - #18 ;
INFO  12:01:39,392 - #24 {
INFO  12:01:39,393 - #46 Table
INFO  12:01:39,393 - #22 (
INFO  12:01:39,393 - #46 int
INFO  12:01:39,394 - #46 factor
INFO  12:01:39,394 - #23 )
INFO  12:01:39,394 - #24 {
INFO  12:01:39,394 - #46 factor
INFO  12:01:39,394 - #35 =
INFO  12:01:39,394 - #46 factor
INFO  12:01:39,395 - #18 ;
INFO  12:01:39,396 - #25 }
INFO  12:01:39,396 - #5 void
INFO  12:01:39,396 - #46 putp
INFO  12:01:39,396 - #22 (
INFO  12:01:39,396 - #46 int
INFO  12:01:39,396 - #46 a
INFO  12:01:39,396 - #20 ,
INFO  12:01:39,396 - #46 int
INFO  12:01:39,396 - #46 idx
INFO  12:01:39,396 - #23 )
INFO  12:01:39,397 - #24 {
INFO  12:01:39,397 - #46 pos
INFO  12:01:39,397 - #26 [
INFO  12:01:39,397 - #46 idx
INFO  12:01:39,397 - #27 ]
INFO  12:01:39,397 - #35 =
INFO  12:01:39,397 - #46 a
INFO  12:01:39,397 - #18 ;
INFO  12:01:39,397 - #25 }
INFO  12:01:39,397 - #5 void
INFO  12:01:39,398 - #46 putn
INFO  12:01:39,398 - #22 (
INFO  12:01:39,398 - #46 int
INFO  12:01:39,398 - #46 a
INFO  12:01:39,398 - #20 ,
INFO  12:01:39,398 - #46 int
INFO  12:01:39,398 - #46 idx
INFO  12:01:39,398 - #23 )
INFO  12:01:39,398 - #24 {
INFO  12:01:39,399 - #46 neg
INFO  12:01:39,399 - #26 [
INFO  12:01:39,399 - #46 idx
INFO  12:01:39,399 - #27 ]
INFO  12:01:39,399 - #35 =
INFO  12:01:39,399 - #46 a
INFO  12:01:39,399 - #18 ;
INFO  12:01:39,399 - #25 }
INFO  12:01:39,399 - #46 int
INFO  12:01:39,399 - #46 getp
INFO  12:01:39,399 - #22 (
INFO  12:01:39,400 - #46 int
INFO  12:01:39,400 - #46 idx
INFO  12:01:39,400 - #23 )
INFO  12:01:39,400 - #24 {
INFO  12:01:39,400 - #4 return
INFO  12:01:39,400 - #46 pos
INFO  12:01:39,400 - #26 [
INFO  12:01:39,401 - #46 idx
INFO  12:01:39,401 - #27 ]
INFO  12:01:39,401 - #18 ;
INFO  12:01:39,401 - #25 }
INFO  12:01:39,401 - #46 int
INFO  12:01:39,401 - #46 getn
INFO  12:01:39,401 - #22 (
INFO  12:01:39,401 - #46 int
INFO  12:01:39,401 - #46 idx
INFO  12:01:39,401 - #23 )
INFO  12:01:39,401 - #24 {
INFO  12:01:39,401 - #4 return
INFO  12:01:39,401 - #46 neg
INFO  12:01:39,401 - #26 [
INFO  12:01:39,401 - #46 idx
INFO  12:01:39,401 - #27 ]
INFO  12:01:39,401 - #18 ;
INFO  12:01:39,401 - #25 }
INFO  12:01:39,401 - #25 }
INFO  12:01:39,402 - #25 }
INFO  12:01:39,402 - #46 Table
INFO  12:01:39,402 - #46 val
INFO  12:01:39,402 - #18 ;
INFO  12:01:39,403 - #46 Int
INFO  12:01:39,403 - #46 rows
INFO  12:01:39,403 - #20 ,
INFO  12:01:39,403 - #46 columns
INFO  12:01:39,403 - #18 ;
INFO  12:01:39,403 - #24 {
INFO  12:01:39,403 - #5 void
INFO  12:01:39,403 - #46 f
INFO  12:01:39,403 - #22 (
INFO  12:01:39,403 - #46 char
INFO  12:01:39,403 - #46 ch
INFO  12:01:39,403 - #20 ,
INFO  12:01:39,403 - #46 int
INFO  12:01:39,403 - #46 a
INFO  12:01:39,403 - #20 ,
INFO  12:01:39,403 - #46 int
INFO  12:01:39,404 - #46 arg
INFO  12:01:39,404 - #23 )
INFO  12:01:39,404 - #46 int
INFO  12:01:39,404 - #46 x
INFO  12:01:39,404 - #18 ;
INFO  12:01:39,404 - #24 {
INFO  12:01:39,404 - #46 x
INFO  12:01:39,404 - #35 =
INFO  12:01:39,404 - #46 arg
INFO  12:01:39,404 - #18 ;
INFO  12:01:39,405 - #25 }
INFO  12:01:39,405 - #5 void
INFO  12:01:39,405 - #46 main
INFO  12:01:39,405 - #22 (
INFO  12:01:39,405 - #23 )
INFO  12:01:39,405 - #46 int
INFO  12:01:39,405 - #46 x
INFO  12:01:39,405 - #20 ,
INFO  12:01:39,406 - #46 i
INFO  12:01:39,406 - #18 ;
INFO  12:01:39,406 - #46 char
INFO  12:01:39,406 - #46 c
INFO  12:01:39,406 - #18 ;
INFO  12:01:39,406 - #46 int
INFO  12:01:39,406 - #46 arr
INFO  12:01:39,406 - #26 [
INFO  12:01:39,406 - #27 ]
INFO  12:01:39,406 - #18 ;
INFO  12:01:39,406 - #24 {
INFO  12:01:39,406 - #46 val
INFO  12:01:39,406 - #35 =
INFO  12:01:39,406 - #12 new
INFO  12:01:39,406 - #46 Table
INFO  12:01:39,407 - #22 (
INFO  12:01:39,407 - #45 2
INFO  12:01:39,407 - #23 )
INFO  12:01:39,408 - #18 ;
INFO  12:01:39,408 - #46 arr
INFO  12:01:39,408 - #35 =
INFO  12:01:39,408 - #12 new
INFO  12:01:39,408 - #46 int
INFO  12:01:39,408 - #26 [
INFO  12:01:39,408 - #45 3
INFO  12:01:39,408 - #27 ]
INFO  12:01:39,408 - #18 ;
INFO  12:01:39,409 - #46 i
INFO  12:01:39,410 - #35 =
INFO  12:01:39,410 - #45 0
INFO  12:01:39,410 - #18 ;
INFO  12:01:39,410 - #11 while
INFO  12:01:39,410 - #22 (
INFO  12:01:39,410 - #46 i
INFO  12:01:39,410 - #32 <
INFO  12:01:39,410 - #45 3
INFO  12:01:39,411 - #23 )
INFO  12:01:39,411 - #24 {
INFO  12:01:39,411 - #46 arr
INFO  12:01:39,411 - #26 [
INFO  12:01:39,411 - #46 i
INFO  12:01:39,411 - #27 ]
INFO  12:01:39,411 - #35 =
INFO  12:01:39,411 - #46 i
INFO  12:01:39,411 - #18 ;
INFO  12:01:39,411 - #46 i
INFO  12:01:39,412 - #38 ++
INFO  12:01:39,412 - #18 ;
INFO  12:01:39,412 - #25 }
INFO  12:01:39,412 - #46 arr
INFO  12:01:39,412 - #21 .
INFO  12:01:39,412 - #17 foreach
INFO  12:01:39,412 - #22 (
INFO  12:01:39,412 - #46 x
INFO  12:01:39,412 - #34 =>
INFO  12:01:39,412 - #3 print
INFO  12:01:39,412 - #22 (
INFO  12:01:39,412 - #46 x
INFO  12:01:39,412 - #23 )
INFO  12:01:39,412 - #18 ;
INFO  12:01:39,412 - #23 )
INFO  12:01:39,413 - #18 ;
INFO  12:01:39,413 - #46 val
INFO  12:01:39,413 - #21 .
INFO  12:01:39,413 - #46 pos
INFO  12:01:39,413 - #35 =
INFO  12:01:39,413 - #12 new
INFO  12:01:39,413 - #46 int
INFO  12:01:39,413 - #26 [
INFO  12:01:39,413 - #46 size
INFO  12:01:39,413 - #27 ]
INFO  12:01:39,413 - #18 ;
INFO  12:01:39,413 - #46 val
INFO  12:01:39,413 - #21 .
INFO  12:01:39,413 - #46 neg
INFO  12:01:39,413 - #35 =
INFO  12:01:39,413 - #12 new
INFO  12:01:39,414 - #46 int
INFO  12:01:39,414 - #26 [
INFO  12:01:39,414 - #46 size
INFO  12:01:39,414 - #27 ]
INFO  12:01:39,414 - #18 ;
INFO  12:01:39,414 - #13 read
INFO  12:01:39,414 - #22 (
INFO  12:01:39,414 - #46 x
INFO  12:01:39,414 - #23 )
INFO  12:01:39,414 - #18 ;
INFO  12:01:39,414 - #26 [
INFO  12:01:39,414 - #46 i
INFO  12:01:39,414 - #20 ,
INFO  12:01:39,414 - #46 x
INFO  12:01:39,414 - #27 ]
INFO  12:01:39,414 - #35 =
INFO  12:01:39,414 - #46 arr
INFO  12:01:39,414 - #18 ;
INFO  12:01:39,415 - #11 while
INFO  12:01:39,415 - #22 (
INFO  12:01:39,415 - #46 i
INFO  12:01:39,415 - #32 <
INFO  12:01:39,415 - #46 size
INFO  12:01:39,415 - #23 )
INFO  12:01:39,415 - #24 {
INFO  12:01:39,415 - #46 val
INFO  12:01:39,415 - #21 .
INFO  12:01:39,415 - #46 putp
INFO  12:01:39,415 - #22 (
INFO  12:01:39,415 - #45 0
INFO  12:01:39,415 - #20 ,
INFO  12:01:39,415 - #46 i
INFO  12:01:39,415 - #23 )
INFO  12:01:39,415 - #18 ;
INFO  12:01:39,415 - #46 val
INFO  12:01:39,416 - #21 .
INFO  12:01:39,416 - #46 putn
INFO  12:01:39,416 - #22 (
INFO  12:01:39,416 - #45 0
INFO  12:01:39,416 - #20 ,
INFO  12:01:39,416 - #46 i
INFO  12:01:39,416 - #23 )
INFO  12:01:39,416 - #18 ;
INFO  12:01:39,416 - #46 i
INFO  12:01:39,416 - #38 ++
INFO  12:01:39,416 - #18 ;
INFO  12:01:39,416 - #25 }
INFO  12:01:39,416 - #46 f
INFO  12:01:39,416 - #22 (
INFO  12:01:39,416 - #46 c
INFO  12:01:39,416 - #20 ,
INFO  12:01:39,416 - #46 x
INFO  12:01:39,416 - #20 ,
INFO  12:01:39,417 - #46 i
INFO  12:01:39,417 - #23 )
INFO  12:01:39,417 - #18 ;
INFO  12:01:39,417 - #13 read
INFO  12:01:39,417 - #22 (
INFO  12:01:39,417 - #46 rows
INFO  12:01:39,417 - #23 )
INFO  12:01:39,417 - #18 ;
INFO  12:01:39,417 - #46 x
INFO  12:01:39,417 - #35 =
INFO  12:01:39,417 - #46 rows
INFO  12:01:39,417 - #18 ;
INFO  12:01:39,417 - #11 while
INFO  12:01:39,417 - #22 (
INFO  12:01:39,417 - #50 true
INFO  12:01:39,417 - #23 )
